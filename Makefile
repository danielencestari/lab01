.PHONY: run test build clean docker-build docker-run help

# Vari√°veis
APP_NAME=weather-cep-api
DOCKER_IMAGE=$(APP_NAME)
PORT=8080

help: ## Mostra esta mensagem de ajuda
	@echo "Comandos dispon√≠veis:"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2}' $(MAKEFILE_LIST)

run: ## Executa a aplica√ß√£o localmente
	@echo "üöÄ Iniciando aplica√ß√£o na porta $(PORT)..."
	@go run main.go

test: ## Executa todos os testes
	@echo "üß™ Executando testes..."
	@go test ./... -v

test-unit: ## Executa apenas testes unit√°rios (sem E2E)
	@echo "üß™ Executando testes unit√°rios..."
	@go test ./utils/... ./services/... ./handlers/... -v

test-e2e: ## Executa testes E2E (necessita da aplica√ß√£o rodando)
	@echo "üß™ Executando testes E2E..."
	@go test -run TestE2E -v

test-coverage: ## Executa testes com relat√≥rio de cobertura
	@echo "üìä Gerando relat√≥rio de cobertura..."
	@go test -cover ./...

build: ## Compila a aplica√ß√£o
	@echo "üî® Compilando aplica√ß√£o..."
	@go build -o bin/$(APP_NAME) main.go
	@echo "‚úÖ Bin√°rio criado em: bin/$(APP_NAME)"

clean: ## Remove arquivos de build
	@echo "üßπ Limpando arquivos de build..."
	@rm -rf bin/
	@go clean

deps: ## Instala/atualiza depend√™ncias
	@echo "üì¶ Atualizando depend√™ncias..."
	@go mod tidy
	@go mod download

lint: ## Executa linter (se dispon√≠vel)
	@echo "üîç Executando linter..."
	@if command -v golangci-lint >/dev/null 2>&1; then \
		golangci-lint run; \
	else \
		echo "golangci-lint n√£o encontrado. Instale com: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest"; \
	fi

docker-build: ## Constr√≥i imagem Docker
	@echo "üê≥ Construindo imagem Docker..."
	@docker build -t $(DOCKER_IMAGE) .

docker-run: ## Executa aplica√ß√£o via Docker
	@echo "üê≥ Executando aplica√ß√£o via Docker..."
	@docker run --rm -p $(PORT):$(PORT) --env-file .env $(DOCKER_IMAGE)

docker-compose-up: ## Inicia aplica√ß√£o via docker-compose
	@echo "üê≥ Iniciando aplica√ß√£o via docker-compose..."
	@docker-compose up --build

docker-compose-down: ## Para aplica√ß√£o docker-compose
	@echo "üê≥ Parando aplica√ß√£o docker-compose..."
	@docker-compose down

dev: ## Modo desenvolvimento com hot reload (se air estiver instalado)
	@if command -v air >/dev/null 2>&1; then \
		echo "üîÑ Iniciando modo desenvolvimento com hot reload..."; \
		air; \
	else \
		echo "Air n√£o encontrado. Executando modo normal..."; \
		echo "Para instalar air: go install github.com/cosmtrek/air@latest"; \
		make run; \
	fi

check-deps: ## Verifica depend√™ncias necess√°rias
	@echo "üîç Verificando depend√™ncias..."
	@command -v go >/dev/null 2>&1 || { echo "‚ùå Go n√£o encontrado"; exit 1; }
	@command -v docker >/dev/null 2>&1 || echo "‚ö†Ô∏è  Docker n√£o encontrado (opcional)"
	@command -v curl >/dev/null 2>&1 || echo "‚ö†Ô∏è  curl n√£o encontrado (opcional para testes)"
	@echo "‚úÖ Depend√™ncias b√°sicas OK"

test-endpoints: ## Testa endpoints da aplica√ß√£o (precisa estar rodando)
	@echo "üß™ Testando endpoints..."
	@echo "Health check:"
	@curl -s http://localhost:$(PORT)/health | jq . || curl -s http://localhost:$(PORT)/health
	@echo "\nTeste CEP S√£o Paulo:"
	@curl -s http://localhost:$(PORT)/temperature/01310100 | jq . || curl -s http://localhost:$(PORT)/temperature/01310100
	@echo "\nTeste CEP inv√°lido:"
	@curl -s http://localhost:$(PORT)/temperature/123
	@echo "\nTeste CEP n√£o encontrado:"
	@curl -s http://localhost:$(PORT)/temperature/99999999 